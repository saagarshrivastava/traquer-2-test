/**
 * Schema for Traquer-2.0
 *
 */

/**
 * An exam session related information.
 * This includes a number of duplicate (read only) properties 
 * from other entities which are there to make querying easier.
 */
entity Session {
    id Integer,                    // Autogenerated primary key
	scheduleid Integer,            // Links to Schedule details
	candidateid Integer,        // Links to Candidate details
	locationid Integer,            // Links Location details
	examtypeid Integer,        // Links to Exam Type details
	deliverytypeid Integer,    // Links to Delivery Type details
	deliverystatusid Integer,    // Links to Delivery Status details
	examid Integer,                // Links to Exam details
	exambackendid Integer,        // Links to Exam Backend details
	reservationid String,         // The exam session ID
}

relationship OneToOne {
    Session{scheduleid} to Schedule
    Session{candidateid} to Candidate
    Session{locationid} to Location
    Session{examtypeid} to ExamType
    Session{deliverytypeid} to DeliveryType
    Session{deliverystatusid} to DeliveryStatus
    Session{examid} to Exam
    Session{exambackendid} to ExamBackend
}

/**
 * Exam Schedule details mostly pulled from Gumtree.
 */
entity Schedule {
    id Integer,                                // Autogenerated primary key
    scheduledsetupstarttime LocalDate,           // Scheduled exam setup start time from Gumtree
    actualsetupstarttime LocalDate,               // Actual exam setup start time from Gumtree
    scheduledsetupendtime LocalDate,           // Scheduled exam setup end time from Gumtree
    actualsetupendtime LocalDate,               // Actual exam setup start time from Gumtree
    scheduledcandidatearrivaltime LocalDate,   // Scheduled Candidate SSO login time calculated from Gumtree
    actualcandidatearrivaltime LocalDate,       // Actual Candidate SSO login time from ???
    scheduledproctorarrivaltime LocalDate,       // Scheduled proctor attendance time Calculated from Gumtree
    actualproctorarrivaltime LocalDate,           // Actual proctor attendance time from ???
    scheduledonboardingstarttime LocalDate,       // Scheduled onboarding start time calculated from Gumtree
    actualonboardingstarttime LocalDate,       // Actual onboarding start time from ???
    scheduledonboardingendtime LocalDate,       // Scheduled onboarding end time calculated from Gumtree
    actualonboardingendtime LocalDate,           // Actual onboarding end time calculated from Gumtree
    scheduledexamstarttime LocalDate,           // Scheduled exam start time from Gumtree
    actualexamstarttime LocalDate,               // Actual exam start time from Gumtree
    scheduledexamendtime LocalDate,               // Scheduled exam end time from Gumtree
    actualexamendtime LocalDate,               // Actual exam end time from Gumtree
}

/**
 * Candidate details from Gumtree
 */
entity Candidate {
    id Integer,      // Autogenerated primary key
	name String,      // Candidate Name from Gumtree session details
	email String,     // Candidate Email from Gumtree session details
	certid String,    // Candidate CertID from IES??
	rhid String,      // Candidate redhat.com username from IES??
}

/**
 * Location details from Gumtree
 */
entity Location {
    id Integer,          // Autogenerated primary key
    rhieid Integer,     // RHIE ID from Gumtree
    city String,         // City from Gumtree
    country String,      // Country alpha 2 ISO code from Gumtree
    partner String,      // Partner business name from Gumtree
    regionid Integer,   // Link to the Region details
}

relationship ManyToOne {
    Location{regionid} to Region
}

/**
 * Proctoring Instance details
 */
entity ProctoringInstance {
    id Integer,
	proctorstarttime LocalDate,
	proctorendtime LocalDate,
	proctorid Integer,
	sessionid Integer,
	sessionnotes String,
	proctorchat String,
	suspended Boolean,
	terminated Boolean,
	numberofbreaks Integer,
}
relationship ManyToOne {
    ProctoringInstance{proctorid} to Proctor
    ProctoringInstance{sessionid} to Session
}

/**
 * Session Breaks details
 */
entity SessionBreaks {
    id Integer,
	starttime LocalDate,
	endtime LocalDate,
	proctoringinstanceid Integer,
}
relationship ManyToOne {
    SessionBreaks{proctoringinstanceid} to ProctoringInstance
}

/**
 * Incident details
 */
entity Incident {
    id Integer,
    sessionid Integer,
    majorincidentid Integer,
    failurestageid Integer,
    summary String,
    investigationreport String,
    servicenowticketid String,
}

relationship OneToOne {
    Incident{sessionid} to Session
    Incident{failurestageid} to FailureStage
}
relationship ManyToOne {
    Incident{majorincidentid} to MajorIncident
}

/**
 * Category Instance details
 */
entity CategoryInstance {
    id Integer,
    incidentid Integer,
    categoryid Integer,
    rank Integer,
}
relationship ManyToOne {
    CategoryInstance{incidentid} to Incident
}

relationship OneToOne {
    CategoryInstance{categoryid} to Category
}

/**
 * Subcategory Instance details
 */
entity SubcategoryInstance {
    id Integer,
    categoryinstanceid Integer,
    subcategoryid Integer,
    rank Integer,
}
relationship ManyToOne {
    SubcategoryInstance{categoryinstanceid} to CategoryInstance
}
relationship OneToOne {
    SubcategoryInstance{subcategoryid} to Subcategory
}

/**
 * Major Incident details
 */
entity MajorIncident{
    id Integer,
    majorincidentsourceid Integer,
    starttime LocalDate,
    endtime LocalDate,
    date LocalDate,
    details String,
}
relationship OneToOne {
    MajorIncident{majorincidentsourceid} to MajorIncidentSource
}

/**
 * Major Incident Source details
 */
entity MajorIncidentSource {
    id Integer,
    code String,
    description String,
}

/**
 * Proctor details
 */
entity Proctor {
    id Integer,
	name String,
	email String,
	office String,
}

/**
 * Support Instance details
 */
entity SupportInstance {
    id Integer,
	starttime LocalDate,
	endtime LocalDate,
	chatlogs String,
	sessionid Integer,
	supportpersonid Integer,
}
relationship ManyToOne {
    SupportInstance{sessionid} to Session
}
relationship OneToOne {
    SupportInstance{supportpersonid} to SupportPerson
}

/**
 * Support Person details
 */
entity SupportPerson {
    id Integer,
	name String,
	email String,
	office String,
}

/**
 * Delivery Type details
 */
entity DeliveryType {
    id Integer,
	code String,
	description String,
}

/**
 * Exam Type details
 */
entity ExamType {
    id Integer,
	code String,
	description String,
}

/**
 * Delivery Status details
 */
entity DeliveryStatus {
    id Integer,
	code String,
	description String,
}

/**
 * Failure Stage details
 */
entity FailureStage {
    id Integer,
	code String,
	description String,
}

/**
 * Category details
 */
entity Category {
    id Integer,
	code String,
	description String,
}

/**
 * Subcategory details
 */
entity Subcategory {
    id Integer,
	code String,
	description String,
    categoryid Integer,
}

relationship ManyToOne {
    Subcategory{categoryid} to Category
}

/**
 * Exam details
 */
entity Exam {
    id Integer,
	code String,
	description String,
    version String,
}

/**
 * Region details
 */
entity Region {
    id Integer,
	code String,
	description String,
}

/**
 * Exam Backend details
 */
entity ExamBackend {
    id Integer,
	code String,
	description String,
}

/**
 * Offer Type details
 */
entity OfferType {
    id Integer,
	code String,
	description String,
}

/**
 * Cloud Instance details
 */
entity CloudInstance {
    id Integer,
	code String,
	description String,
    cloudregionid Integer,
    exambackendid Integer,
}
relationship OneToOne {
    CloudInstance{cloudregionid} to CloudRegion
    CloudInstance{exambackendid} to ExamBackend
}

/**
 * Cloud Region details
 */
entity CloudRegion {
    id Integer,
	code String,
	description String,
}

/**
 * Offer details
 */
entity Offer {
    id Integer,
    incidentid Integer,
    offertypeid Integer,
    examid Integer,
    discountpercentage Integer,
}

relationship ManyToOne {
    Offer{incidentid} to Incident
    Offer{examid} to Exam
}

relationship OneToOne {
    Offer{offertypeid} to OfferType
}